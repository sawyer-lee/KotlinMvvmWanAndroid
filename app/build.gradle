apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
//引入自定义的加固插件
apply plugin: 'com.sawyer.jiagu'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.sawyer.kotlinmvvmwanandroid"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /*
         *Room 具有以下注释处理器选项：
         *  room.schemaLocation：配置并启用将数据库架构导出到给定目录中的 JSON 文件的功能。
         *  room.incremental：启用 Gradle 增量注释处理器。
         *  room.expandProjection：配置 Room 以重写查询，使其顶部星形投影在展开后仅包含 DAO 方法返回类型中定义的列。
        */
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }

        //APK瘦身之删除无用资源：保留中文简体的string.xml，它是存在于AndroidX库中的
        resConfigs "zh-rCN"
        //resConfigs "zh-rCN","en"

        //APK瘦身之删除无用资源：市面上的绝大部分手机CPU都是arm架构的，模拟器的是x86架构
        //所以在使用第三方的so库时，只需要兼容这一种，放进APK中即可兼容
        /*ndk{
            abiFilters "armeabi-v7a"    //armeabi-v7a对应的是32位，arm64-v8a对应64位
        }*/

        //APK瘦身之删除无用资源：对于arm64架构的设备，使用v7a可以向上兼容，但性能不如arm64的so库
        //所以如果需要打包出针对arm64、armv7的apk，可以使用productFlavor或者spilt
        //方式一：
        /*flavorDimensions "default"
        productFlavors{
            arm32{
                dimension "default"
                ndk{ abiFilters "armeabi-v7a" }
            }
            arm64{
                dimension "default"
                ndk{ abiFilters "arm64-v8a" }
            }
        }*/
        //方式二：
        /*spilts{
            abi{
                enable true
                reset()
                include "arm64-v8a","armeabi-v7a"
                universalApk true //true代表打包一个包含所有so库的APK
            }
        }*/

    }

    signingConfigs{
        release {
            storeFile file(KEY_PATH)
            storePassword KEY_PASS
            keyAlias ALIAS_NAME
            keyPassword ALIAS_PASS
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            //代码缩减
            minifyEnabled false
            //资源缩减，只有与代码缩减配合使用才有效。
            //在代码缩减器移除所有不使用的资源后，资源缩减器便可确定应用仍要使用的资源
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures{
        viewBinding true
    }
}

jiagu{
    userName '16637710725'
    password 'leejyhg#tai1'
    jiaGuTools 'D:\\Soft\\360jiagubao\\jiagu\\jiagu.jar'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //Material
    implementation 'com.google.android.material:material:1.4.0'
    //Lifecycle
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    //Room
    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"
    implementation "androidx.room:room-ktx:2.2.5"
    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
    //OkHttp
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    //BaseRVAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.6'
    //FlowLayout
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    //Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'jp.wasabeef:glide-transformations:4.0.1'
    //AgentWeb
//    implementation 'com.just.agentweb:agentweb:4.1.2'
    implementation 'com.github.Justson.AgentWeb:agentweb-core:v4.1.9-androidx'
    //LiveEventBus
    implementation 'com.jeremyliao:live-event-bus-x:1.5.7'
    //PersistentCookieJar
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    //Banner
    implementation 'com.youth.banner:banner:1.4.10'
    //lottie for android
    implementation 'com.airbnb.android:lottie:3.6.1'
    //hilt 依赖注入
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    //viewBinding
    implementation 'com.dylanc:viewbinding-ktx:1.1.0'
    implementation 'com.dylanc:viewbinding-base-ktx:1.1.0'
    //Moshi
    implementation 'com.squareup.moshi:moshi-kotlin:1.11.0'

    //diy注解
    implementation project(':annotation')
    kapt project(':compiler')

    //自定义注解(反射、动态代理的使用)
    implementation project(':reflect')
}

//apply plugin: ASMPlugin